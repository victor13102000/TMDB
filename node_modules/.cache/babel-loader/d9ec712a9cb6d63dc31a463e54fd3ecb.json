{"ast":null,"code":"var _jsxFileName = \"/home/victoramarilla/bootcamp/TMDB/src/components/Simple.js\",\n    _s = $RefreshSig$();\n\nimport { Box, chakra, Container, Stack, Text, Image, Flex, VStack, Button, Heading, SimpleGrid, StackDivider, useColorModeValue, VisuallyHidden, List, ListItem } from \"@chakra-ui/react\";\nimport { Icon } from '@chakra-ui/react';\nimport { StarIcon } from '@chakra-ui/icons';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport e from \"express\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Simple() {\n  _s();\n\n  const params = useParams();\n  const {\n    id,\n    type\n  } = params;\n  const [title, setTitle] = useState();\n  const [overview, setOverview] = useState();\n  const [date, setDate] = useState();\n  const [lenguaje, setLenguaje] = useState();\n  const [genres, setGenres] = useState();\n  const [productioncompanies, setProduction_companies] = useState();\n  const [imag, setImag] = useState();\n  useEffect(async () => {\n    const datos = await axios.post(\"http://localhost:3001/search/single\", {\n      id: id,\n      type: type\n    });\n\n    if (datos.data) {\n      console.log(datos.data);\n      setTitle(datos.data.title ? datos.data.title : datos.data.name);\n      setOverview(datos.data.overview);\n      setDate(datos.data.release_date);\n      setLenguaje(datos.data.original_language);\n      setGenres(datos.data.genres);\n      setProduction_companies(datos.data.production_companies);\n      setImag(`https://image.tmdb.org/t/p/w300${datos.data.poster_path}`);\n    }\n  }, []);\n\n  const addtofavorite = () => {\n    axios.post();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    bgGradient: \"linear(to-l, #7928CA, #FF0080)\",\n    maxW: \"7xl\",\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: {\n        base: 1,\n        lg: 2\n      },\n      spacing: {\n        base: 8,\n        md: 10\n      },\n      py: {\n        base: 18,\n        md: 24\n      },\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        children: /*#__PURE__*/_jsxDEV(Image, {\n          rounded: \"md\",\n          alt: \"product image\",\n          src: imag,\n          fit: \"cover\",\n          align: \"center\",\n          w: \"100%\",\n          h: {\n            base: \"100%\",\n            sm: \"400px\",\n            lg: \"500px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: {\n          base: 6,\n          md: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          textAlign: 'end',\n          as: \"header\",\n          children: /*#__PURE__*/_jsxDEV(Heading, {\n            lineHeight: 1.1,\n            fontWeight: 600,\n            fontSize: {\n              base: \"2xl\",\n              sm: \"4xl\",\n              lg: \"5xl\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              as: StarIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          as: \"header\",\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            lineHeight: 1.1,\n            fontWeight: 600,\n            fontSize: {\n              base: \"2xl\",\n              sm: \"4xl\",\n              lg: \"5xl\"\n            },\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            color: useColorModeValue(\"gray.900\", \"gray.400\"),\n            fontWeight: 300,\n            fontSize: \"2xl\",\n            children: [date, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 21\n            }, this), lenguaje === 'en' && 'language: English']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: {\n            base: 4,\n            sm: 6\n          },\n          direction: \"column\",\n          divider: /*#__PURE__*/_jsxDEV(StackDivider, {\n            borderColor: useColorModeValue(\"gray.200\", \"gray.600\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this),\n          children: [/*#__PURE__*/_jsxDEV(VStack, {\n            spacing: {\n              base: 4,\n              sm: 6\n            },\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"lg\",\n              children: overview\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontSize: {\n                base: \"16px\",\n                lg: \"18px\"\n              },\n              color: useColorModeValue(\"yellow.500\", \"yellow.300\"),\n              fontWeight: \"500\",\n              textTransform: \"uppercase\",\n              mb: \"4\",\n              children: \"Genres\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n              columns: {\n                base: 1,\n                md: 2\n              },\n              spacing: 10,\n              children: /*#__PURE__*/_jsxDEV(List, {\n                spacing: 2,\n                children: genres && genres.map(genre => {\n                  return /*#__PURE__*/_jsxDEV(ListItem, {\n                    children: genre.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 27\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontSize: {\n                base: \"16px\",\n                lg: \"18px\"\n              },\n              color: useColorModeValue(\"yellow.500\", \"yellow.300\"),\n              fontWeight: \"500\",\n              textTransform: \"uppercase\",\n              mb: \"4\",\n              children: \"Production Companies\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(List, {\n              spacing: 2,\n              children: productioncompanies && productioncompanies.map(companie => {\n                return /*#__PURE__*/_jsxDEV(ListItem, {\n                  children: /*#__PURE__*/_jsxDEV(Text, {\n                    as: \"span\",\n                    fontWeight: \"bold\",\n                    children: companie.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 27\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Simple, \"UHEpcZu8vlquWitDd89w5zCbaG4=\", false, function () {\n  return [useParams, useColorModeValue, useColorModeValue, useColorModeValue, useColorModeValue];\n});\n\n_c = Simple;\n\nvar _c;\n\n$RefreshReg$(_c, \"Simple\");","map":{"version":3,"sources":["/home/victoramarilla/bootcamp/TMDB/src/components/Simple.js"],"names":["Box","chakra","Container","Stack","Text","Image","Flex","VStack","Button","Heading","SimpleGrid","StackDivider","useColorModeValue","VisuallyHidden","List","ListItem","Icon","StarIcon","axios","useEffect","useState","useParams","e","Simple","params","id","type","title","setTitle","overview","setOverview","date","setDate","lenguaje","setLenguaje","genres","setGenres","productioncompanies","setProduction_companies","imag","setImag","datos","post","data","console","log","name","release_date","original_language","production_companies","poster_path","addtofavorite","base","lg","md","sm","map","genre","companie"],"mappings":"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","sourcesContent":["import {\n  Box,\n  chakra,\n  Container,\n  Stack,\n  Text,\n  Image,\n  Flex,\n  VStack,\n  Button,\n  Heading,\n  SimpleGrid,\n  StackDivider,\n  useColorModeValue,\n  VisuallyHidden,\n  List,\n  ListItem,\n} from \"@chakra-ui/react\";\nimport { Icon } from '@chakra-ui/react'\nimport {StarIcon} from '@chakra-ui/icons'\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport e from \"express\";\n\nexport default function Simple() {\n  const params = useParams();\n  const { id, type } = params;\n  const [title, setTitle]= useState()\n  const [overview, setOverview]= useState()\n  const [date, setDate]= useState()\n  const [lenguaje, setLenguaje]= useState()\n  const [genres, setGenres]= useState()\n  const [productioncompanies, setProduction_companies]= useState()\n  const [imag ,setImag]= useState()\n\n\nuseEffect(async () => {\n  const datos = await axios.post(\"http://localhost:3001/search/single\",{id:id ,type:type})\n  if (datos.data) {\n    console.log(datos.data)\n   setTitle(datos.data.title? datos.data.title : datos.data.name)\n   setOverview(datos.data.overview)\n   setDate(datos.data.release_date)\n   setLenguaje(datos.data.original_language)\n   setGenres(datos.data.genres)\n   setProduction_companies(datos.data.production_companies)\n   setImag(`https://image.tmdb.org/t/p/w300${datos.data.poster_path}`)\n  }\n}, []);\n\n\nconst addtofavorite = ()=>{\n  axios.post()\n}\n  \n\n\n\n  return (\n    <Container bgGradient=\"linear(to-l, #7928CA, #FF0080)\" maxW={\"7xl\"}>\n      <SimpleGrid\n        columns={{ base: 1, lg: 2 }}\n        spacing={{ base: 8, md: 10 }}\n        py={{ base: 18, md: 24 }}\n      >\n        <Flex>\n          \n          <Image\n            rounded={\"md\"}\n            alt={\"product image\"}\n            src={imag\n            }\n            fit={\"cover\"}\n            align={\"center\"}\n            w={\"100%\"}\n            h={{ base: \"100%\", sm: \"400px\", lg: \"500px\" }}\n          />\n        </Flex>\n        <Stack spacing={{ base: 6, md: 10 }}>\n          <Box  textAlign={'end'} as={\"header\"}>\n          <Heading\n           \n           lineHeight={1.1}\n           fontWeight={600}\n           fontSize={{ base: \"2xl\", sm: \"4xl\", lg: \"5xl\" }}\n         > \n            <Icon   as={StarIcon} /> \n         </Heading>\n\n          </Box>\n          <Box as={\"header\"}>\n            <Heading\n           \n              lineHeight={1.1}\n              fontWeight={600}\n              fontSize={{ base: \"2xl\", sm: \"4xl\", lg: \"5xl\" }}\n            >\n            {title} \n            </Heading>\n            <Text\n              color={useColorModeValue(\"gray.900\", \"gray.400\")}\n              fontWeight={300}\n              fontSize={\"2xl\"}\n            >\n             {date} <br/>\n             {lenguaje === 'en' && 'language: English'}\n            </Text>\n          </Box>\n\n          <Stack\n            spacing={{ base: 4, sm: 6 }}\n            direction={\"column\"}\n            divider={\n              <StackDivider\n                borderColor={useColorModeValue(\"gray.200\", \"gray.600\")}\n              />\n            }\n          >\n            <VStack spacing={{ base: 4, sm: 6 }}>\n              \n              <Text fontSize={\"lg\"}>\n              {overview}\n              </Text>\n            </VStack>\n            <Box>\n              <Text\n                fontSize={{ base: \"16px\", lg: \"18px\" }}\n                color={useColorModeValue(\"yellow.500\", \"yellow.300\")}\n                fontWeight={\"500\"}\n                textTransform={\"uppercase\"}\n                mb={\"4\"}\n              >\n                Genres\n              </Text>\n          \n              <SimpleGrid columns={{ base: 1, md: 2 }} spacing={10}>\n                <List spacing={2}>\n                  {genres && genres.map(genre=>{\n                    return<ListItem>{genre.name}</ListItem>\n                  })}\n                </List>\n              </SimpleGrid>\n            </Box>\n            <Box>\n              <Text\n                fontSize={{ base: \"16px\", lg: \"18px\" }}\n                color={useColorModeValue(\"yellow.500\", \"yellow.300\")}\n                fontWeight={\"500\"}\n                textTransform={\"uppercase\"}\n                mb={\"4\"}\n              >\n               Production Companies\n              </Text>\n              <List spacing={2}>\n                {productioncompanies && productioncompanies.map(companie=>{\n                  return  <ListItem>\n                  <Text as={\"span\"} fontWeight={\"bold\"}>\n                    {companie.name}\n                  </Text>\n                </ListItem>\n                })}\n               \n              </List>\n            </Box>\n          </Stack>\n        </Stack>\n      </SimpleGrid>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}