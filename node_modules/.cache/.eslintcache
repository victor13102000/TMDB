[{"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/index.js":"1","/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/App.js":"2","/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/Grid.js":"3","/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/NewUser.js":"4","/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/Register.js":"5","/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/Search.js":"6","/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/nadvar.js":"7","/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/context/AuthContext.jsx":"8","/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/GridS.js":"9","/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/commons/Cards.js":"10","/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/hooks/useInputs.js":"11","/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/commons/CardSearch.js":"12","/home/victoramarilla/bootcamp/TMDB/src/index.js":"13","/home/victoramarilla/bootcamp/TMDB/src/App.js":"14","/home/victoramarilla/bootcamp/TMDB/src/components/SignIn.js":"15","/home/victoramarilla/bootcamp/TMDB/src/components/SignUp.js":"16","/home/victoramarilla/bootcamp/TMDB/src/components/Navbar.js":"17","/home/victoramarilla/bootcamp/TMDB/src/components/Card.js":"18","/home/victoramarilla/bootcamp/TMDB/src/components/Grid.js":"19","/home/victoramarilla/bootcamp/TMDB/src/components/Home.js":"20","/home/victoramarilla/bootcamp/TMDB/src/components/GridSearch.js":"21","/home/victoramarilla/bootcamp/TMDB/src/state/store.js":"22","/home/victoramarilla/bootcamp/TMDB/src/state/search.js":"23","/home/victoramarilla/bootcamp/TMDB/src/components/Simple.js":"24","/home/victoramarilla/bootcamp/TMDB/src/components/Favorites.js":"25","/home/victoramarilla/bootcamp/TMDB/src/components/CardFavorite.js":"26","/home/victoramarilla/bootcamp/TMDB/src/state/favorite.js":"27"},{"size":393,"mtime":1649603645804,"results":"28","hashOfConfig":"29"},{"size":1425,"mtime":1649603645764,"results":"30","hashOfConfig":"29"},{"size":407,"mtime":1649603645776,"results":"31","hashOfConfig":"29"},{"size":1434,"mtime":1649603645776,"results":"32","hashOfConfig":"29"},{"size":1273,"mtime":1649603645780,"results":"33","hashOfConfig":"29"},{"size":1022,"mtime":1649603645788,"results":"34","hashOfConfig":"29"},{"size":1263,"mtime":1649603645788,"results":"35","hashOfConfig":"29"},{"size":1095,"mtime":1649603645788,"results":"36","hashOfConfig":"29"},{"size":348,"mtime":1649603645776,"results":"37","hashOfConfig":"29"},{"size":554,"mtime":1649603645772,"results":"38","hashOfConfig":"29"},{"size":217,"mtime":1649603645796,"results":"39","hashOfConfig":"29"},{"size":409,"mtime":1649603645772,"results":"40","hashOfConfig":"29"},{"size":473,"mtime":1649955858643,"results":"41","hashOfConfig":"42"},{"size":1265,"mtime":1650470723999,"results":"43","hashOfConfig":"42"},{"size":2010,"mtime":1650416508414,"results":"44","hashOfConfig":"42"},{"size":3672,"mtime":1650476920557,"results":"45","hashOfConfig":"42"},{"size":8760,"mtime":1650462343184,"results":"46","hashOfConfig":"42"},{"size":654,"mtime":1650475017469,"results":"47","hashOfConfig":"42"},{"size":916,"mtime":1650475226441,"results":"48","hashOfConfig":"42"},{"size":1662,"mtime":1650470777058,"results":"49","hashOfConfig":"42"},{"size":356,"mtime":1650477792087,"results":"50","hashOfConfig":"42"},{"size":399,"mtime":1650483068620,"results":"51","hashOfConfig":"42"},{"size":256,"mtime":1649958833405,"results":"52","hashOfConfig":"42"},{"size":5106,"mtime":1650471582551,"results":"53","hashOfConfig":"42"},{"size":865,"mtime":1650482810665,"results":"54","hashOfConfig":"42"},{"size":1374,"mtime":1650485385630,"results":"55","hashOfConfig":"42"},{"size":271,"mtime":1650480915029,"results":"56","hashOfConfig":"42"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ajhrc5",{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"1m49ymh",{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"83"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"83"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"83"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"83"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"83"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"83"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"83"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"83"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"83"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/index.js",[],"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/App.js",["121"],"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/Grid.js",[],"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/NewUser.js",[],"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/Register.js",[],"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/Search.js",[],"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/nadvar.js",[],"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/context/AuthContext.jsx",[],"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/components/GridS.js",[],"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/commons/Cards.js",[],"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/hooks/useInputs.js",[],"/home/victoramarilla/bootcamp/checkpoint-TMDB-victor/checkpoint-TMDB-220101/src/commons/CardSearch.js",[],"/home/victoramarilla/bootcamp/TMDB/src/index.js",[],["122","123"],"/home/victoramarilla/bootcamp/TMDB/src/App.js",["124"],"import { Route, Routes,useLocation } from \"react-router\";\nimport Navbar from \"./components/Navbar\";\nimport { Heading } from \"@chakra-ui/react\";\nimport SignUp from \"./components/SignUp\";\nimport SignIn from \"./components/SignIn\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport Home from \"./components/Home\";\nimport GridGeneral from \"./components/Grid\";\nimport  GridSearch from './components/GridSearch'\nimport Simple from \"./components/Simple\";\nimport Favorites from './components/Favorites'\n\n\n\nconst App = () => {\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/login/wasLogged\").then((userLoged) => {\n    localStorage.setItem(\"user\", userLoged.data)\n    });\n  }, []);\n  return (\n    <>\n      <Heading>\n        <Navbar />\n      </Heading>\n    \n      <Routes>\n        <Route path=\"/\" element={ <Home/> } />\n        <Route path=\"/signup\" element={<SignUp />} />\n        <Route path=\"/signin\" element={<SignIn />} />\n        <Route path=\"/media/:type\" element={<GridGeneral/>}/>\n        <Route path=\"/search/:type\" element={<GridSearch/>}/>\n        <Route path=\"/simpleview/:id/:type\" element={<Simple/>}/>\n        <Route path=\"/favorite/:id\" element={<Favorites/>}/>\n      \n        \n      </Routes>\n\n    </>\n  );\n};\n\nexport default App;\n","/home/victoramarilla/bootcamp/TMDB/src/components/SignIn.js",["125","126","127"],"import {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Checkbox,\n  Stack,\n  Link,\n  Button,\n  Heading,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function SimpleCard() {\n  const navigate=useNavigate()\n  const onSubmit = (dataSingnIn) => {\n     axios.post(\"http://localhost:3001/login\", dataSingnIn)\n     .then(res=> res.data)\n     .then(user => {localStorage.setItem('user',`${user.firstName} ${user.lastName}`)\n    localStorage.setItem('userId', `${user.id}` )\n    })\n     .then(()=> navigate('/'))\n  };\n  const { register, handleSubmit } = useForm();\n\n  return (\n    <Flex\n      minH={\"100vh\"}\n      align={\"center\"}\n      justify={\"center\"}\n      bg={useColorModeValue(\"white\")}\n    >\n      <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} py={12} px={6}>\n        <Stack align={\"center\"}>\n          <Heading fontSize={\"4xl\"}>Sign in to your account</Heading>\n        </Stack>\n        <Box\n          rounded={\"lg\"}\n          bg={useColorModeValue(\"white\", \"gray.700\")}\n          boxShadow={\"lg\"}\n          p={8}\n        >\n          <Stack spacing={4}>\n            <form onSubmit={handleSubmit(onSubmit)}>\n\n            <FormControl id=\"email\">\n              <FormLabel>Email address</FormLabel>\n              <Input {...register('email')}type=\"email\" />\n            </FormControl>\n            <FormControl id=\"password\">\n              <FormLabel>Password</FormLabel>\n              <Input {...register('password')} type=\"password\" />\n            </FormControl>\n            <Stack spacing={10}>\n              <Button\n              type=\"submit\"\n                bg={\"pink.400\"}\n                color={\"white\"}\n                _hover={{\n                  bg: \"pink.300\",\n                }}\n              >\n                Sign in\n              </Button >\n            </Stack>\n            </form>\n          </Stack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n}\n","/home/victoramarilla/bootcamp/TMDB/src/components/SignUp.js",["128","129"],"import {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  HStack,\n  InputRightElement,\n  Stack,\n  Button,\n  Heading,\n  Text,\n  useColorModeValue,\n  Link,\n} from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nexport default function SignupCard() {\n  const [showPassword, setShowPassword] = useState(false);\n  const { register, handleSubmit } = useForm();\n  const navigate= useNavigate()\n\n\n  const onSubmit = async (dataSingnUp) => {\n   \nconst register= await axios.post('http://localhost:3001/register', dataSingnUp)\n\n   const login=await axios.post('http://localhost:3001/login', {email: dataSingnUp.email,\n  password: dataSingnUp.password})\n  localStorage.setItem('user',`${login.data.firstName} ${login.data.lastName}`)\n  localStorage.setItem('userId',`${login.data.id}`)\n   navigate('/') \n\n\n  };\n\n\n\n  return (\n    <Flex\n      minH={\"100vh\"}\n      align={\"center\"}\n      justify={\"center\"}\n      bg={useColorModeValue(\"white\")}\n    >\n      <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} py={12} px={6}>\n        <Stack align={\"center\"}>\n          <Heading fontSize={\"4xl\"} textAlign={\"center\"} color={\"pink.400\"}>\n            Sign up\n          </Heading>\n        </Stack>\n        <Box\n          rounded={\"lg\"}\n          bg={useColorModeValue(\"white\", \"gray.700\")}\n          boxShadow={\"lg\"}\n          p={8}\n        >\n        \n          <Stack spacing={4}>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <HStack>\n              <Box>\n                <FormControl id=\"firstName\" isRequired>\n                  <FormLabel>First Name</FormLabel>\n                  <Input {...register(\"firstName\")} type=\"text\" />\n                </FormControl>\n              </Box>\n              <Box>\n                <FormControl id=\"lastName\">\n                  <FormLabel>Last Name</FormLabel>\n                  <Input {...register(\"lastName\")} type=\"text\" />\n                </FormControl>\n              </Box>\n            </HStack>\n            <FormControl id=\"email\" isRequired>\n              <FormLabel>Email address</FormLabel>\n              <Input {...register('email')}type=\"email\"/>\n            </FormControl>\n            <FormControl id=\"password\" isRequired>\n              <FormLabel>Password</FormLabel>\n              <InputGroup>\n                <Input\n                  {...register(\"password\")}\n                  type={showPassword ? \"text\" : \"password\"}\n                />\n                <InputRightElement h={\"full\"}>\n                  <Button\n                    variant={\"ghost\"}\n                    onClick={() =>\n                      setShowPassword((showPassword) => !showPassword)\n                    }\n                  >\n                    {showPassword ? <ViewIcon /> : <ViewOffIcon />}\n                  </Button>\n                </InputRightElement>\n              </InputGroup>\n            </FormControl>\n            <Stack spacing={10} pt={2}>\n              <Button\n                type=\"submit\"\n                loadingText=\"Submitting\"\n                size=\"lg\"\n                bg={\"pink.400\"}\n                color={\"white\"}\n                _hover={{\n                  bg: \"pink.300\",\n                }}\n              >\n                Sign up\n              </Button>\n            </Stack>\n            </form>\n\n            <Stack pt={6}>\n              <Text color={'pink.400'}align={\"center\"}>\n                Already a user? Login\n              </Text>\n            </Stack>\n          </Stack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n}\n","/home/victoramarilla/bootcamp/TMDB/src/components/Navbar.js",["130","131","132","133","134","135","136","137","138"],"import {\n  Box,\n  Flex,\n  Text,\n  IconButton,\n  Button,\n  Stack,\n  Collapse,\n  Icon,\n  Link,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  useColorModeValue,\n  useBreakpointValue,\n  useDisclosure,\n  Menu,\n  MenuList,\n  MenuButton,\n} from \"@chakra-ui/react\";\nimport {\n  HamburgerIcon,\n  CloseIcon,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  StarIcon\n} from \"@chakra-ui/icons\";\nimport { Link as Linked } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function WithSubnavigation() {\n  const navigate = useNavigate();\n  const { isOpen, onToggle } = useDisclosure();\n  const user = localStorage.getItem(\"user\");\n  const id = localStorage.getItem('userId')\n  const logOut = () => {\n    axios\n      .post(\"http://localhost:3001/login/logout\")\n      .then(() => localStorage.removeItem(\"user\"))\n      .then(() => navigate(\"/\"));\n  };\n\n\n  return (\n    <Box>\n      <Flex\n        bg={\"rgba(51,47,83,1) 100%\"}\n        color={useColorModeValue(\"gray.600\", \"white\")}\n        minH={\"60px\"}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={\"solid\"}\n        borderColor={useColorModeValue(\"gray.200\", \"gray.900\")}\n        align={\"center\"}\n      >\n        <Flex\n          flex={{ base: 1, md: \"auto\" }}\n          ml={{ base: -2 }}\n          display={{ base: \"flex\", md: \"none\" }}\n        >\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={\"ghost\"}\n            aria-label={\"Toggle Navigation\"}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }}  justify={{ base: \"center\", md: \"start\" }}>\n          <Text\n            fontSize={\"lg\"}\n            textAlign={useBreakpointValue({ base: \"center\", md: \"left\" })}\n            fontFamily={\"heading\"}\n            color={\"pink.400\"}\n          >\n            <Linked to=\"/\">\n              <strong>TMDB</strong>\n            </Linked>\n          </Text>\n\n          <Flex display={{ base: \"none\", md: \"flex\" }} ml={10}>\n         <Linked to={`/favorite/${id}`}>\n          <Icon height={'20px'} _hover={{\n    color: \"yellow.400\",\n  }}\n  _active={{\n    color:\"yellow.400\"\n  }}\n as={StarIcon} />\n         </Linked>\n        \n            <DesktopNav />\n          </Flex>\n        </Flex>\n        <Stack\n          flex={{ base: 1, md: 50 }}\n          justify={{ base: \"center\", md: \"center\" }}\n          direction={\"row\"}\n          spacing={6}\n        >\n          <Linked to='/media/movies'>\n          <Button\n            display={{ base: \"none\", md: \"inline-flex\" }}\n            fontSize={\"sm\"}\n            fontWeight={600}\n            color={\"white\"}\n            bgGradient=\"linear(to-r, rgba(51,47,83,1), pink.500)\"\n            href={\"#\"}\n            _hover={{\n              bg: \"pink.300\",\n            }}\n          >\n            Movies\n          </Button>\n          </Linked>\n          <Linked to='/media/tv'>\n          <Button\n            display={{ base: \"none\", md: \"inline-flex\" }}\n            fontSize={\"sm\"}\n            fontWeight={600}\n            color={\"white\"}\n            bgGradient=\"linear(to-r, rgba(51,47,83,1), pink.500)\"\n            href={\"#\"}\n            _hover={{\n              bg: \"pink.300\",\n            }}\n          >\n            TV\n          </Button>\n          </Linked>\n        </Stack>\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={\"flex-end\"}\n          direction={\"row\"}\n          spacing={6}\n        >\n          <Button\n            color={\"pink.400\"}\n            as={\"a\"}\n            fontSize={\"lg\"}\n            fontWeight={400}\n            variant={\"link\"}\n            href=\"https://github.com/victor13102000\"\n          >\n            GitHub\n          </Button>\n\n          {user ? (\n            <>\n              <Menu>\n                <MenuButton\n                  as={Button}\n                  bg={\"pink.400\"}\n                  color={\"white\"}\n                  _active={{\n                    bg: \"pink.300\",\n                  }}\n                  _hover={{\n                    bg: \"pink.300\",\n                  }}\n                >\n                  <strong>{user}</strong>\n                </MenuButton>\n                <MenuList\n                  fontFamily={\"arial\"}\n                  bg={\"pink.400\"}\n                  color={\"white\"}\n                  textAlign={\"center\"}\n                >\n                  <Button\n                    onClick={logOut}\n                    bg={\"pink.400\"}\n                    _hover={{\n                      bg: \"pink.300\",\n                    }}\n                    _active={{\n                      bg: \"pink.300\",\n                    }}\n                    color={\"white\"}\n                    textAlign={\"center\"}\n                  >\n                    <strong>Logout</strong>\n                  </Button>\n                </MenuList>\n              </Menu>\n            </>\n          ) : (\n            <>\n              <Button\n                as={\"b\"}\n                color={\"pink.400\"}\n                fontSize={\"lg\"}\n                fontWeight={400}\n                variant={\"link\"}\n                href={\"#\"}\n              >\n                <Linked to=\"/signin\">Sign In</Linked>\n              </Button>\n              <Button\n                display={{ base: \"none\", md: \"inline-flex\" }}\n                fontSize={\"sm\"}\n                fontWeight={600}\n                color={\"white\"}\n                bgGradient=\"linear(to-r, pink.500 , rgba(51,47,83,1))\"\n                href={\"#\"}\n                _hover={{\n                  bg: \"pink.300\",\n                }}\n              >\n                <Linked to=\"/signup\">Sign Up</Linked>\n              </Button>\n            </>\n          )}\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <MobileNav />\n      </Collapse>\n    </Box>\n  );\n}\n\nconst DesktopNav = () => {\n  const linkColor = useColorModeValue(\"gray.600\", \"gray.200\");\n  const linkHoverColor = useColorModeValue(\"gray.800\", \"white\");\n  const popoverContentBgColor = useColorModeValue(\"white\", \"gray.800\");\n\n  return <Stack direction={\"row\"} spacing={4}></Stack>;\n};\n\nconst DesktopSubNav = ({ label, href, subLabel }: NavItem) => {\n  return (\n    <Link\n      href={href}\n      role={\"group\"}\n      display={\"block\"}\n      p={2}\n      rounded={\"md\"}\n      _hover={{ bg: useColorModeValue(\"pink.50\", \"gray.900\") }}\n    >\n      <Stack direction={\"row\"} align={\"center\"}>\n        <Box>\n          <Text\n            transition={\"all .3s ease\"}\n            _groupHover={{ color: \"pink.400\" }}\n            fontWeight={500}\n          >\n            {label}\n          </Text>\n          <Text fontSize={\"sm\"}>{subLabel}</Text>\n        </Box>\n        <Flex\n          transition={\"all .3s ease\"}\n          transform={\"translateX(-10px)\"}\n          opacity={0}\n          _groupHover={{ opacity: \"100%\", transform: \"translateX(0)\" }}\n          justify={\"flex-end\"}\n          align={\"center\"}\n          flex={1}\n        >\n          <Icon color={\"pink.400\"} w={5} h={5} as={ChevronRightIcon} />\n        </Flex>\n      </Stack>\n    </Link>\n  );\n};\n\nconst MobileNav = () => {\n  return (\n    <Stack\n      bg={useColorModeValue(\"white\", \"gray.800\")}\n      p={4}\n      display={{ md: \"none\" }}\n    ></Stack>\n  );\n};\n\nconst MobileNavItem = ({ label, children, href }: NavItem) => {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Stack spacing={4} onClick={children && onToggle}>\n      <Flex\n        py={2}\n        as={Link}\n        href={href ?? \"#\"}\n        justify={\"space-between\"}\n        align={\"center\"}\n        _hover={{\n          textDecoration: \"none\",\n        }}\n      >\n        <Text\n          fontWeight={600}\n          color={useColorModeValue(\"gray.600\", \"gray.200\")}\n        >\n          {label}\n        </Text>\n        {children && (\n          <Icon\n            as={ChevronDownIcon}\n            transition={\"all .25s ease-in-out\"}\n            transform={isOpen ? \"rotate(180deg)\" : \"\"}\n            w={6}\n            h={6}\n          />\n        )}\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity style={{ marginTop: \"0!important\" }}>\n        <Stack\n          mt={2}\n          pl={4}\n          borderLeft={1}\n          borderStyle={\"solid\"}\n          borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n          align={\"start\"}\n        >\n          {children &&\n            children.map((child) => (\n              <Link key={child.label} py={2} href={child.href}>\n                {child.label}\n              </Link>\n            ))}\n        </Stack>\n      </Collapse>\n    </Stack>\n  );\n};\n\ninterface NavItem {\n  label: string;\n  subLabel?: string;\n  children?: Array<NavItem>;\n  href?: string;\n}\n","/home/victoramarilla/bootcamp/TMDB/src/components/Card.js",["139","140"],"import { Link } from \"react-router-dom\";\nconst Card = ({media, type})=>{\n\n\n\nconst contenido= media.data ? media.data : media\nconst imageUrl= \"https://image.tmdb.org/t/p/w300\"+contenido.poster_path;\nconst id= contenido.id\n\n\n    return (<>\n\n <div class=\"card\">\n     <img  src={imageUrl}/>\n      <div class=\"card-content\">\n        <h2>{contenido.title}</h2>\n        <p>\n          {contenido.overview}\n        </p>\n        <Link to={`/simpleview/${id}/${type}`}>\n        <a href=\"#\" class=\"btn\"\n          > See more information\n          <i class=\"las la-long-arrow-alt-right\"></i>\n        </a>\n</Link>\n      </div>\n    </div>\n    </>)\n}\n\nexport default Card","/home/victoramarilla/bootcamp/TMDB/src/components/Grid.js",["141"],"import { SimpleGrid, GridItem, Box, Link, } from \"@chakra-ui/react\";\nimport Card from \"./Card\";\nimport { useParams } from \"react-router\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\n\nfunction GridGeneral() {\n\nconst [media, setMedia]= useState([])\n  const {type}= useParams()\n  \n  useEffect(()=>{\n    axios.get(`http://localhost:3001/${type}`)\n    .then(mediaDate=> mediaDate.data)\n    .then(media=> setMedia(media))\n  },[type])\n\n\n  \n  return (\n  \n        <Box p={3}>\n          <SimpleGrid bgGradient='linear(to-r, rgba(51,47,83,1), pink.500)' spacing=\"30px\" minChildWidth=\"300px\">\n         {media && media.map((media, i)=>{\n           return <>\n           \n        <GridItem key={i}>\n            <Card media={media} type={type}></Card>\n          </GridItem>\n           \n\n           </>\n         })}\n\n          </SimpleGrid>\n           \n        </Box>\n\n  );\n}\n\nexport default GridGeneral;","/home/victoramarilla/bootcamp/TMDB/src/components/Home.js",[],"/home/victoramarilla/bootcamp/TMDB/src/components/GridSearch.js",["142"],"\nimport Card from \"./Card\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router\";\n\n\nfunction GridGeneral() {\n\nconst medias= useSelector((state) => state.search);\n\n\n\n  return ( <div className=\"galery\">\n{medias && medias.map((media,i)=>{\n  return <Card media={media}  key={i}/>\n})}\n  </div>\n\n  );\n}\n\nexport default GridGeneral;","/home/victoramarilla/bootcamp/TMDB/src/state/store.js",[],"/home/victoramarilla/bootcamp/TMDB/src/state/search.js",[],"/home/victoramarilla/bootcamp/TMDB/src/components/Simple.js",["143","144","145","146","147"],"import {\n  Box,\n  chakra,\n  Container,\n  Stack,\n  Text,\n  Image,\n  Flex,\n  VStack,\n  Button,\n  Heading,\n  SimpleGrid,\n  StackDivider,\n  useColorModeValue,\n  \n  List,\n  ListItem,\n} from \"@chakra-ui/react\";\nimport { Icon } from \"@chakra-ui/react\";\nimport { StarIcon } from \"@chakra-ui/icons\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function Simple() {\n  const params = useParams();\n  let { id, type } = params;\n  const [title, setTitle] = useState();\n  const [overview, setOverview] = useState();\n  const [date, setDate] = useState();\n  const [lenguaje, setLenguaje] = useState();\n  const [genres, setGenres] = useState();\n  const [productioncompanies, setProduction_companies] = useState();\n  const [imag, setImag] = useState();\n  const userId = parseInt(localStorage.getItem(\"userId\"));\n  let isFavorite = false;\n  if (type === \"movies\") type = \"movie\";\n  if (type === \"tvs\") type = \"tv\";\nconsole.log(id, type)\n  useEffect(async () => {\n    const datos = await axios.post(\"http://localhost:3001/search/single\", {\n      id: id,\n      type: type,\n    });\n    if (datos.data) {\n      console.log(datos.data);\n      setTitle(datos.data.title ? datos.data.title : datos.data.name);\n      setOverview(datos.data.overview);\n      setDate(datos.data.release_date);\n      setLenguaje(datos.data.original_language);\n      setGenres(datos.data.genres);\n      setProduction_companies(datos.data.production_companies);\n      setImag(`https://image.tmdb.org/t/p/w300${datos.data.poster_path}`);\n    }\n  }, []);\n\n  if (typeof id != \"number\") id = parseInt(id);\n\n  const addtofavorite = () => {\n    axios.post(\"http://localhost:3001/favorites/addtofavorite\", {\n      userId: userId,\n      mediaId: id,\n      type: type,\n    });\n  };\n\n  return (\n    <Container bgGradient=\"linear(to-l, #7928CA, #FF0080)\" maxW={\"7xl\"}>\n      <SimpleGrid\n        columns={{ base: 1, lg: 2 }}\n        spacing={{ base: 8, md: 10 }}\n        py={{ base: 18, md: 24 }}\n      >\n        <Flex>\n          <Image\n            rounded={\"md\"}\n            alt={\"product image\"}\n            src={imag}\n            fit={\"cover\"}\n            align={\"center\"}\n            w={\"100%\"}\n            h={{ base: \"100%\", sm: \"400px\", lg: \"500px\" }}\n          />\n        </Flex>\n        <Stack spacing={{ base: 6, md: 10 }}>\n          <Box textAlign={\"end\"} as={\"header\"}>\n            <Heading\n              lineHeight={1.1}\n              fontWeight={600}\n              fontSize={{ base: \"2xl\", sm: \"4xl\", lg: \"5xl\" }}\n            >\n              <Icon onClick={addtofavorite} as={StarIcon} />\n            </Heading>\n          </Box>\n          <Box as={\"header\"}>\n            <Heading\n              lineHeight={1.1}\n              fontWeight={600}\n              fontSize={{ base: \"2xl\", sm: \"4xl\", lg: \"5xl\" }}\n            >\n              {title}\n            </Heading>\n            <Text\n              color={useColorModeValue(\"gray.900\", \"gray.400\")}\n              fontWeight={300}\n              fontSize={\"2xl\"}\n            >\n              {date} <br />\n              {lenguaje === \"en\" && \"language: English\"}\n            </Text>\n          </Box>\n\n          <Stack\n            spacing={{ base: 4, sm: 6 }}\n            direction={\"column\"}\n            divider={\n              <StackDivider\n                borderColor={useColorModeValue(\"gray.200\", \"gray.600\")}\n              />\n            }\n          >\n            <VStack spacing={{ base: 4, sm: 6 }}>\n              <Text fontSize={\"lg\"}>{overview}</Text>\n            </VStack>\n            <Box>\n              <Text\n                fontSize={{ base: \"16px\", lg: \"18px\" }}\n                color={useColorModeValue(\"yellow.500\", \"yellow.300\")}\n                fontWeight={\"500\"}\n                textTransform={\"uppercase\"}\n                mb={\"4\"}\n              >\n                Genres\n              </Text>\n\n              <SimpleGrid columns={{ base: 1, md: 2 }} spacing={10}>\n                <List spacing={2}>\n                  {genres &&\n                    genres.map((genre) => {\n                      return <ListItem>{genre.name}</ListItem>;\n                    })}\n                </List>\n              </SimpleGrid>\n            </Box>\n            <Box>\n              <Text\n                fontSize={{ base: \"16px\", lg: \"18px\" }}\n                color={useColorModeValue(\"yellow.500\", \"yellow.300\")}\n                fontWeight={\"500\"}\n                textTransform={\"uppercase\"}\n                mb={\"4\"}\n              >\n                Production Companies\n              </Text>\n              <List spacing={2}>\n                {productioncompanies &&\n                  productioncompanies.map((companie) => {\n                    return (\n                      <ListItem>\n                        <Text as={\"span\"} fontWeight={\"bold\"}>\n                          {companie.name}\n                        </Text>\n                      </ListItem>\n                    );\n                  })}\n              </List>\n            </Box>\n          </Stack>\n        </Stack>\n      </SimpleGrid>\n    </Container>\n  );\n}\n","/home/victoramarilla/bootcamp/TMDB/src/components/Favorites.js",["148"],"import CardFavorite from \"./CardFavorite\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFavorites } from \"../state/favorite\";\n\n\nconst Favorites = () => {\n  const dispatch=  useDispatch()\n  const params = useParams();\n  let { id } = params;\n  id = parseInt(id);\n  \n  \n  useEffect( ()=> {\n axios.get(`http://localhost:3001/favorites/${id}`)\n    .then((fav)=> dispatch(setFavorites(fav.data)))\n  }, []);\n\n  const favorites= useSelector((state) => state.favorites);\nconsole.log('favoritesss', favorites)\n  return (\n    <div className=\"galery\">\n      {favorites &&\n        favorites.map((favorite) => {\n          return <CardFavorite type={favorite.type} id={favorite.mediaId} />;\n        })}\n    </div>\n  );\n};\n\nexport default Favorites;\n","/home/victoramarilla/bootcamp/TMDB/src/components/CardFavorite.js",["149","150","151","152"],"/home/victoramarilla/bootcamp/TMDB/src/state/favorite.js",[],{"ruleId":"153","severity":1,"message":"154","line":32,"column":6,"nodeType":"155","endLine":32,"endColumn":8,"suggestions":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":1,"column":24,"nodeType":"163","messageId":"164","endLine":1,"endColumn":35},{"ruleId":"161","severity":1,"message":"165","line":7,"column":3,"nodeType":"163","messageId":"164","endLine":7,"endColumn":11},{"ruleId":"161","severity":1,"message":"166","line":9,"column":3,"nodeType":"163","messageId":"164","endLine":9,"endColumn":7},{"ruleId":"161","severity":1,"message":"167","line":12,"column":3,"nodeType":"163","messageId":"164","endLine":12,"endColumn":7},{"ruleId":"161","severity":1,"message":"166","line":15,"column":3,"nodeType":"163","messageId":"164","endLine":15,"endColumn":7},{"ruleId":"161","severity":1,"message":"168","line":32,"column":7,"nodeType":"163","messageId":"164","endLine":32,"endColumn":15},{"ruleId":"161","severity":1,"message":"169","line":11,"column":3,"nodeType":"163","messageId":"164","endLine":11,"endColumn":10},{"ruleId":"161","severity":1,"message":"170","line":12,"column":3,"nodeType":"163","messageId":"164","endLine":12,"endColumn":17},{"ruleId":"161","severity":1,"message":"171","line":13,"column":3,"nodeType":"163","messageId":"164","endLine":13,"endColumn":17},{"ruleId":"161","severity":1,"message":"172","line":29,"column":10,"nodeType":"163","messageId":"164","endLine":29,"endColumn":19},{"ruleId":"161","severity":1,"message":"173","line":230,"column":9,"nodeType":"163","messageId":"164","endLine":230,"endColumn":18},{"ruleId":"161","severity":1,"message":"174","line":231,"column":9,"nodeType":"163","messageId":"164","endLine":231,"endColumn":23},{"ruleId":"161","severity":1,"message":"175","line":232,"column":9,"nodeType":"163","messageId":"164","endLine":232,"endColumn":30},{"ruleId":"161","severity":1,"message":"176","line":237,"column":7,"nodeType":"163","messageId":"164","endLine":237,"endColumn":20},{"ruleId":"161","severity":1,"message":"177","line":284,"column":7,"nodeType":"163","messageId":"164","endLine":284,"endColumn":20},{"ruleId":"178","severity":1,"message":"179","line":14,"column":6,"nodeType":"180","endLine":14,"endColumn":28},{"ruleId":"181","severity":1,"message":"182","line":21,"column":9,"nodeType":"180","endLine":22,"endColumn":12},{"ruleId":"161","severity":1,"message":"166","line":1,"column":37,"nodeType":"163","messageId":"164","endLine":1,"endColumn":41},{"ruleId":"161","severity":1,"message":"183","line":4,"column":10,"nodeType":"163","messageId":"164","endLine":4,"endColumn":19},{"ruleId":"161","severity":1,"message":"184","line":3,"column":3,"nodeType":"163","messageId":"164","endLine":3,"endColumn":9},{"ruleId":"161","severity":1,"message":"185","line":10,"column":3,"nodeType":"163","messageId":"164","endLine":10,"endColumn":9},{"ruleId":"161","severity":1,"message":"186","line":36,"column":7,"nodeType":"163","messageId":"164","endLine":36,"endColumn":17},{"ruleId":"153","severity":1,"message":"187","line":40,"column":13,"nodeType":"188","endLine":55,"endColumn":4},{"ruleId":"153","severity":1,"message":"189","line":55,"column":6,"nodeType":"155","endLine":55,"endColumn":8,"suggestions":"190"},{"ruleId":"153","severity":1,"message":"191","line":19,"column":6,"nodeType":"155","endLine":19,"endColumn":8,"suggestions":"192"},{"ruleId":"161","severity":1,"message":"193","line":3,"column":10,"nodeType":"163","messageId":"164","endLine":3,"endColumn":13},{"ruleId":"153","severity":1,"message":"189","line":23,"column":6,"nodeType":"155","endLine":23,"endColumn":8,"suggestions":"194"},{"ruleId":"178","severity":1,"message":"179","line":30,"column":9,"nodeType":"180","endLine":30,"endColumn":37},{"ruleId":"181","severity":1,"message":"182","line":35,"column":13,"nodeType":"180","endLine":35,"endColumn":37},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'toggleAuth'. Either include it or remove the dependency array.","ArrayExpression",["195"],"no-native-reassign",["196"],"no-negated-in-lhs",["197"],"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","'Link' is defined but never used.","'Text' is defined but never used.","'register' is assigned a value but never used.","'Popover' is defined but never used.","'PopoverTrigger' is defined but never used.","'PopoverContent' is defined but never used.","'useEffect' is defined but never used.","'linkColor' is assigned a value but never used.","'linkHoverColor' is assigned a value but never used.","'popoverContentBgColor' is assigned a value but never used.","'DesktopSubNav' is assigned a value but never used.","'MobileNavItem' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'useParams' is defined but never used.","'chakra' is defined but never used.","'Button' is defined but never used.","'isFavorite' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'id' and 'type'. Either include them or remove the dependency array.",["198"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["199"],"'set' is defined but never used.",["200"],{"desc":"201","fix":"202"},"no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"203","fix":"207"},"Update the dependencies array to be: [toggleAuth]",{"range":"208","text":"209"},"Update the dependencies array to be: [id, type]",{"range":"210","text":"211"},"Update the dependencies array to be: [dispatch, id]",{"range":"212","text":"213"},{"range":"214","text":"211"},[949,951],"[toggleAuth]",[1587,1589],"[id, type]",[527,529],"[dispatch, id]",[799,801]]